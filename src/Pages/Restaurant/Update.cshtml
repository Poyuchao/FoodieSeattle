@page "{id}"
@using ContosoCrafts.WebSite.Services
@inject RestaurantService _RestaurantService
@model ContosoCrafts.WebSite.Pages.Restaurant.UpdateModel

@{
    ViewData["Title"] = "Update page";
}

<p style="line-height:5.5em;"> </p>
<h2>Update</h2>
<p style="line-height:5.5em;"> </p>

<!--CRUDi: Update page to show: Form for updating restaurant-->
<form method="post" enctype="multipart/form-data" id="form">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @Html.HiddenFor(x => x.Restaurant.Id)

    <!--This is a form group that contains a label and an input field for the Title property of the Restaurant model.-->
    <div class="form-group">
        <label asp-for="Restaurant.Title" class="control-label">Restaurant Name</label>
        <input asp-for="Restaurant.Title" class="form-control" readonly />
        <span asp-validation-for="Restaurant.Title" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Restaurant.Neighborhood" class="control-label">Restaurant Neighborhood</label>
        <input asp-for="Restaurant.Neighborhood" class="form-control" required />
        <span asp-validation-for="Restaurant.Neighborhood" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Restaurant.Type" class="control-label">Cuisine Type</label>
        <input asp-for="Restaurant.Type" class="form-control" id="restaurantType" required />
        <span asp-validation-for="Restaurant.Type" class="text-danger"></span>
    </div>


    <div class="form-group">
        <label asp-for="Restaurant.Description" class="control-label">Description</label>
        <input asp-for="Restaurant.Description" class="form-control" id="restaurantDescription" />
        <span asp-validation-for="Restaurant.Description" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Restaurant.Url" class="control-label">Link to Restaurant Home Website</label>
        <input asp-for="Restaurant.Url" class="form-control" id="restaurantUrl" required />
        <span asp-validation-for="Restaurant.Url" class="text-danger"></span>
        <span class="text-danger visually-hidden" id="url-error-text">Please enter a valid URL.</span>
    </div>

    <div class="form-group">
        <label asp-for="Restaurant.Image" class="control-label">Link to Restaurant Image</label>
        <input asp-for="Restaurant.Image" class="form-control" id="restaurantImage" required />
        <span asp-validation-for="Restaurant.Image" class="text-danger"></span>
        <span class="text-danger visually-hidden" id="image-error-text">Please enter a valid URL.</span>
    </div>

    <div class="form-group">
        <a type="button" value="Cancel" class="= btn btn-primary" asp-page="/Restaurant/Index">Cancel</a>
        <input type="submit" value="Save" class="btn btn-primary" id="save" />
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


@*@page "{id}"
    @using ContosoCrafts.WebSite.Services
    @inject RestaurantService _RestaurantService
    @model ContosoCrafts.WebSite.Pages.Restaurant.UpdateModel*@

<!--<p style="line-height:5.5em;"> </p>
<h2>Update</h2>
<p style="line-height:5.5em;"> </p>-->
<!--CRUDi: Update page to show: Form for updating restaurant-->
<!--class attribute is set to container needs-validation which is used for applying Bootstrap styling to the form and enabling client-side form validation respectively.-->
<!--The method attribute is set to post which specifies the HTTP method to use when submitting the form.-->
<!--The novalidate attribute is used to disable HTML5 built-in form validation.-->
<!--<form class="container needs-validation" method="post" novalidate>-->
<!--The asp-validation-summary attribute is set to ModelOnly which means that it will only display error messages for the top-level model-->
<!--Class attribute is set to text-danger which applies Bootstrap styling for the text color.-->
<!--<div asp-validation-summary="ModelOnly" class="text-danger"></div>-->
<!--This is a hidden input field that stores the Id property of the Restaurant model.
It is generated using Razor syntax with the HiddenFor HTML helper method.-->
<!--Html.HiddenFor(x => x.Restaurant.Id)-->
<!--This is a form group that contains a label and an input field for the Title property of the Restaurant model.-->
<!--<div class="form-group">-->
<!--The asp-for attribute is used to generate the label and input elements based on the Title property of the Restaurant model.-->
<!--<label asp-for="Restaurant.Title" class="control-label">Restaurant Name</label>-->
<!--The class attribute of the input field is set to form-control which applies Bootstrap styling to the input field.-->
<!--The id attribute is set to restaurantTitle which is used to reference the input field in the JavaScript code.-->
<!--The required attribute is used to enable HTML5 built-in form validation to ensure that the input field is not empty.-->
<!--The data-val attribute is set to true which enables client-side validation using jQuery Unobtrusive Validation.-->
<!--The data-val-required attribute is used to specify a custom error message when the input field is empty.-->
<!--<input asp-for="Restaurant.Title" class="form-control" id="restaurantTitle" required
       data-val="true" data-val-required="Please provide the restaurant title" />-->
<!--The valid-feedback and invalid-feedback classes are used to display feedback messages when the input is valid or invalid, respectively.-->
<!--<div class="valid-feedback">
            Looks good!
        </div>
        <div class="invalid-feedback">
            Please enter a Restaurant name.
        </div>
    </div>


    <div class="form-group">
        <label asp-for="Restaurant.Type" class="control-label">Cuisine Type</label>
        <input asp-for="Restaurant.Type" class="form-control" id="restaurantType" required />
        <div class="valid-feedback">
            Looks good!
        </div>
        <div class="invalid-feedback">
            Please enter a cuisine type.
        </div>
    </div>

    <div class="form-group">
        <label asp-for="Restaurant.Description" class="control-label">Description</label>
        <input asp-for="Restaurant.Description" class="form-control" id="restaurantDescription" required />
        <div class="valid-feedback">
            Looks good!
        </div>
        <div class="invalid-feedback">
            Please enter a short description.
        </div>
    </div>

    <div class="form-group">
        <label asp-for="Restaurant.Url" class="control-label">Link to Restaurant Home Website</label>
        <input asp-for="Restaurant.Url" class="form-control" id="restaurantUrl" required />
        <div class="valid-feedback">
            Looks good!
        </div>
        <div class="invalid-feedback">
            Please enter a valid URL.
        </div>
    </div>

    <div class="form-group">
        <label asp-for="Restaurant.Image" class="control-label">Link to Restaurant Image</label>
        <input asp-for="Restaurant.Image" class="form-control" id="restaurantImage" required />
        <div class="valid-feedback">
            Looks good!
        </div>
        <div class="invalid-feedback">
            Please enter a valid image URL.
        </div>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</form>
<p style="line-height:5.5em;"> </p>


@*@section Scripts {*@
    <script>//Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            //This line converts the forms NodeList into an array using the slice method and then loops over each form in the array using the forEach method.
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    //form.addEventListener('submit', function (event), the function performs form validation and stops the form from being submitted if there are validation errors.
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            //event.preventDefault() is called to prevent the form from being submitted and the page from reloading.
                            event.preventDefault()
                            // event.stopPropagation() is called inside the if statement to stop the propagation of the submit event if the form is invalid
                            event.stopPropagation()
                        } else {
                            // Add a class to the valid feedback element to show it
                            form.querySelector('.valid-feedback').classList.add('d-block');
                        }

                        //form.classList.add('was-validated') adds the was-validated class to the form element
                        form.classList.add('was-validated')
                    }, false)
                })
        })()</script>
}-->
