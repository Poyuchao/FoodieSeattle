@*This line defines the URL pattern for this page. It expects an "id" parameter in the URL, which will be used to look up the restaurant to display.*@
@page "{id}"
@*This line imports the namespace for the RestaurantService class, which is used to retrieve restaurants.*@
@using FoodieSeattle.WebSite.Services
@inject RestaurantService _RestaurantService
@*This line sets the page's model to the ReadModel class, which contains the data to display on the page.*@
@model FoodieSeattle.WebSite.Pages.Restaurant.ReadModel



@{
    ViewData["Title"] = "Read";
}


<head>

    <link rel="stylesheet" href="/css/Restaurant.css" />

</head>

<p style="line-height:5.5em;"> </p>

<!--CRUDi: ReadModel page to show: contains data of the selected restaurant-->

<p style="line-height:5.5em;"> </p>

<!--Show images and other content-->
<div class="read-container">
    <div class="content">
        <h2 class="title" id="restaurantTitle">@Model.Restaurant.Title</h2>
        <p style="line-height:5.5em;"> </p>
        <img class="card-img" src='@Model.Restaurant.Image' alt='Image for @Model.Restaurant.Title'>
        <p style="line-height:5.5em;"> </p>
        <h3 class="card-info">Why We Love It</h3>
        <p class="card-text">@Model.Restaurant.Description</p>
        <h3 class="card-info">Details & Location</h3>
        <p class="card-cuisine">Cuisine Type:   @Model.Restaurant.Type</p>

        <p class="card-neighborhood">Restaurant Neighborhood:     @Model.Restaurant.Neighborhood</p>
        <!--Show restaurant location on map -->
       
        <div class="googleMap">
            <div class="col-md-6">
                @*bootstrap right side*@
                <div id="map" style=" height:400px; width: 700px;"></div>

                <script>
                    var map;

                    function initMap() { //This function serves as the callback for the Google Maps API and is executed when the API finishes loading.
                        map = new google.maps.Map(document.getElementById("map"), {
                            center: { lat: 47.608013, lng: -122.335167 },
                            zoom: 12,// map is initialized by creating a new google.maps.Map object and passing the ID of an HTML element with the ID "map" where the map will be displayed. The map is centered at coordinates { lat: 47.608013, lng: -122.335167 } and zoomed to level 12.
                        });

                        var geocoder = new google.maps.Geocoder();//This object is used to convert addresses into geographic coordinates 

                        var restaurantAddress = "@Model.Restaurant.Neighborhood, Seattle, WA";

                        geocoder.geocode({ address: restaurantAddress }, function (results, status) {//The callback function receives the geocoding results and the status of the request.

                            if (status == google.maps.GeocoderStatus.OK) {

                                var restaurantLocation = results[0].geometry.location;

                                var restaurantMarker = new google.maps.Marker({
                                    position: restaurantLocation,
                                    map: map,
                                });

                                var infoWindow = new google.maps.InfoWindow({
                                    content: "<h3>@Model.Restaurant.Title</h3>"+"<p>"+"<h6>@Model.Restaurant.Neighborhood</h6>" + "<p>"+"<h6>@Model.Restaurant.Type</h6>" + "</p>"  
                                });

                                restaurantMarker.addListener('click', function () {
                                    infoWindow.open(map, restaurantMarker);
                                });

                                map.setCenter(restaurantLocation);
                            } else {
                                alert("Geocode was not successful for the following reason: " + status);
                            }
                        });
                    }

                </script>

                <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDxAw-kRVRqgTvvEdqy_8UJgZx2tmJx1IQ&callback=initMap&language=en"></script>
            </div>
            </div>
   


        <!--Visit Restaurant Button-->
        <a href="@Model.Restaurant.Url" class="btn btn-visit visit-button" target="_blank"><img src="~/img/icons/visit-rest.png" alt="visit us" style="width: 150px; height: auto;" /></a>


        @*This block displays buttons to update or delete the restaurant, which link to the Update and Delete pages respectively. T
        he asp-route-id attribute sets the id parameter in the URL to the current restaurant's id.*@

        @if (Model.PasswordEntered == true)
        {
            <div class="row">
                <a asp-page="Update" asp-route-id="@Model.Restaurant.Id" class="btn btn-primary update-button">Update</a>
                <a asp-page="Delete" asp-route-id="@Model.Restaurant.Id" class="btn btn-danger delete-button">Delete</a>
            </div>
        }
        else
        {
            <form method="post">
                <div class="form-group">
                    @if (Model.IsPasswordInvalid)
                    {
                        <!--Error message when user input incorrect password-->
                        <input type="password" class="form-control error-input" id="password" name="password" placeholder="Sorry Invalid Password...Try again!">
                    }
                    else
                    {
                        <!--user input password blank -->
                        <input type="password" class="form-control" id="password" name="password" placeholder="Enter password to make changes to restaurant info...">
                    }
                </div>
                <button type="submit" class="btn btn-primary unlock-button">Unlock<i class="fas fa-key"></i></button>
            </form>
        }

    </div>
</div>
<!--Show restaurant homepage button that will open a new tab-->


<br />
<br />

