@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject RestaurantService _RestaurantService

<div class="cuisine-filter">
    <label for="cuisineType">Cuisine Filter:</label>
    <select id="cuisineType" @onchange="@(e => FilteredRestaurants(e.Value.ToString()))">
        <option value="">All Restaurants</option>
        <option value="Caribbean">Caribbean</option>
        <option value="Chinese">Chinese</option>
        <option value="Indian">Indian</option>
        <option value="Japanese">Japanese</option>
        <option value="Laotian">Laotian</option>
        <option value="Mexican">Mexican</option>
        <option value="Thai">Thai</option>
        <option value="Vietnamese">Vietnamese</option>
    </select>
</div>

<style>
    .cuisine-filter {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

        .cuisine-filter label {
            font-size: 24px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-right: 10px;
        }

        .cuisine-filter select {
            padding: 5px;
            border: none;
            border-radius: 10px;
            box-shadow: none;
            font-size: 20px;
        }
        #cuisineType {
            font-family: Arial, sans-serif;
            font-size: 20px;
            color: #333;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #fff;
        }

        #cuisineType option {
            font-family: Arial, sans-serif;
            font-size: 16px;
            color: #333;
            background-color: #fff;
        }
</style>



@if (ifFilter)
{
    <div class="card-columns">
        @foreach (var restaurant in filterRestaurants)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@restaurant.Image');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@restaurant.Title</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <button @onclick="(e => SelectRestaurant(restaurant.Id))"
                                data-toggle="modal" data-target="#restaurantModal" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>


}
else
{
    <div class="card-columns">
        @foreach (var restaurant in _RestaurantService.GetRestaurants())
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@restaurant.Image');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@restaurant.Title</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <button @onclick="(e => SelectRestaurant(restaurant.Id))"
                                data-toggle="modal" data-target="#restaurantModal" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>
}



@if (selectedRestaurant != null)
{
    <div class="modal fade" id="restaurantModal" tabindex="-1" role="dialog" aria-labelledby="restauranttTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="restauranttTitle">@selectedRestaurant.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedRestaurant.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedRestaurant.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    IEnumerable<RestaurantModel> filterRestaurants;
    RestaurantModel selectedRestaurant;
    bool ifFilter = false;
    string selectedRestaurantId;

    void SelectRestaurant(string restaurantId)
    {
        selectedRestaurantId = restaurantId;
        selectedRestaurant = _RestaurantService.GetRestaurants().First(x => x.Id == restaurantId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        //if (selectedRestaurant.Ratings == null)
        //{
        //    currentRating = 0;
        //    voteCount = 0;
        //}
        //else
        //{
        //    voteCount = selectedRestaurant.Ratings.Count();
        //    voteLabel = voteCount > 1 ? "Votes" : "Vote";
        //    currentRating = selectedRestaurant.Ratings.Sum() / voteCount;
        //}

        //System.Console.WriteLine($"Current rating for {selectedRestaurant.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedRestaurant.Id}: {rating}");
        _RestaurantService.AddRating(selectedRestaurantId, rating);
        SelectRestaurant(selectedRestaurantId);
    }

    IEnumerable<RestaurantModel> FilteredRestaurants(string type)
    {
        ifFilter = true;
        Console.WriteLine(type);
        //Console.WriteLine(_RestaurantService.GetRestaurantsByType(type).ToArray()[0].Title);
        filterRestaurants = _RestaurantService.GetRestaurantsByType(type);
        return _RestaurantService.GetRestaurantsByType(type);
    }
}
